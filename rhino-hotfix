#!/usr/bin/env bash

#rhino-hotfix get
#rhino-hotfix get [#PRNUM]
#rhino-hotfix get [user/repo#PRNUM]
#rhino-hotfix run <key>
#rhino-hotfix run <key>[#PRNUM]
#rhino-hotfix run <key>[@user/repo#PRNUM]

tabs 4
export BOLD='\033[1m'
export NC='\033[0m'
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export BRed='\033[1;31m'
export BGreen='\033[1;32m'
export BYellow='\033[1;33m'
export BBlue='\033[1;34m'
export BPurple='\033[1;35m'
export BCyan='\033[1;36m'

export FIXDIR="/tmp/rhino-hotfix"
export CARCH="$(dpkg --print-architecture)"

fancy_message() {
  local MESSAGE_TYPE="${1}" MESSAGE="${2}" FANCYTEXT
  shift 2
  local PRINTARGS=("${@}")
  case ${MESSAGE_TYPE} in
    info) FANCYTEXT="[${BGreen}+${NC}] ${BOLD}INFO${NC}:" ;;
    warn) FANCYTEXT="[${BYellow}*${NC}] ${BOLD}WARNING${NC}:" ;;
    error) FANCYTEXT="[${BRed}!${NC}] ${BOLD}ERROR${NC}:" ;;
    sub) FANCYTEXT="\t[${BBlue}>${NC}]" ;;
    *) FANCYTEXT="[${BOLD}?${NC}] ${BOLD}UNKNOWN${NC}:" ;;
  esac
  case ${MESSAGE_TYPE} in
    info|sub) printf "${FANCYTEXT} ${MESSAGE}\n" "${PRINTARGS[@]}" ;;
    *) printf "${FANCYTEXT} ${MESSAGE}\n" "${PRINTARGS[@]}" >&2 ;;
  esac
}

function ask() {
  local prompt default reply template="${1}"
  shift 1
  local yn="${@: -1}"
  local rest=("${@:1:$(($# - 1))}")

  if [[ ${yn} == 'Y' ]]; then
    prompt="${BIGreen}Y${NC}/${RED}n${NC}"
    default='Y'
  elif [[ ${yn} == 'N' ]]; then
    prompt="${GREEN}y${NC}/${BRed}N${NC}"
    default='N'
  else
    prompt="${GREEN}y${NC}/${RED}n${NC}"
  fi

  printf "${template} [$prompt] " "${rest[@]}"

  if [[ ${DISABLE_PROMPTS:-z} == "z" ]]; then
    export DISABLE_PROMPTS="no"
  fi

  if [[ $DISABLE_PROMPTS == "no" ]]; then
    read -r reply <&0
    if [[ $NON_INTERACTIVE ]]; then
      if [[ -z $reply ]]; then
        echo -n "$default"
      fi
      echo "$reply"
    fi
  else
    echo "$default"
    reply=$default
  fi

  if [[ -z $reply ]]; then
    reply=$default
  fi

  while :; do
    case "$reply" in
      Y* | y*)
        export answer=1
        break
        ;;
      N* | n*)
        export answer=0
        break
        ;;
      *)
        printf "${template} [$prompt] " "${rest[@]}"
        read -r reply < /dev/tty
        ;;
    esac
  done
}

cleanup() {
  if [[ -d "${FIXDIR}" ]]; then
   rm -rf "${FIXDIR}"/*
  fi
}

parse_link() {
	local metalink
  local -n ref_user="${2}" ref_repo="${3}" ref_branch="${4}" ref_pr="${5}"
	metalink="${1}"
  if [[ ${metalink} == *"#"* ]]; then
  	if [[ ${metalink} == *":"* ]]; then
  		fancy_message error "branch and PR cannot both be provided"
  		exit 1
  	fi
  	ref_pr="${metalink##*#}"
  	metalink="${metalink%%#*}"
  fi
  if [[ ${metalink} == *":"* ]]; then
    ref_branch="${metalink##*:}"
    metalink="${metalink%%:*}"
  else
    ref_branch="main"
  fi
  [[ -z ${metalink} ]] && metalink="rhino-linux/hotfix"
  ref_user="${metalink%%/*}"
  if [[ ${metalink} == *"/"* ]]; then
  	ref_repo="${metalink##*/}"
  else
    fancy_message error "malformed input"
  	exit 1
  fi
}

parse_pr() {
  local orig_user="${1}" orig_repo="${2}" num="${3}" head_name head_sha head_user gh_provides
  local -n ref_url="${4}" ref_login="${5}"
  gh_provides=$(curl -fsSL "https://api.github.com/repos/${orig_user}/${orig_repo}/pulls/${num}") || exit 1
  head_name=$(echo "${gh_provides}" | jq -r '.head.repo.name')
  head_sha=$(echo "${gh_provides}" | jq -r '.head.sha')
  head_user=$(echo "${gh_provides}" | jq -r '.head.user.login')
  ref_url="https://raw.githubusercontent.com/${head_user}/${head_name}/${head_sha}" ref_login="${head_user}/${head_name}"
}

if ! [[ -f "/etc/os-release" ]]; then
  fancy_message error "not running on a Linux system."
  exit 1
fi

while IFS='=' read -r key value; do
    case "${key}" in
      "NAME") d_name="${value//\"/}" ;;
      "VERSION_CODENAME") d_codename="${value//\"/}" ;;
      "ID") d_id="${value//\"/}" ;;
    esac
done < /etc/os-release

if ! [[ ${d_name} == "Rhino Linux" && ${d_codename} == "devel" && ${d_id} == "ubuntu" ]]; then
  fancy_message error "not running on a Rhino Linux system."
  exit 1
fi  

input="${1}"
trap cleanup EXIT INT

parse_link "${input}" user repo branch pr
if [[ -z ${pr} ]]; then
	BASEURL="https://raw.githubusercontent.com/${user}/${repo}/refs/heads/${branch}"
	login="${user}/${repo}"
else
	parse_pr "${user}" "${repo}" "${pr}" BASEURL login
fi
hotfixes="$(curl -fsSL ${BASEURL}/hotfixes.json)" || { fancy_message error "failed to fetch hotfixes"; exit 1; }
if [[ ${hotfixes} == "{}" ]]; then
  fancy_message info "There are no available hotfixes from ${BPurple}${login}${NC}"
  exit 0
fi
mapfile -t keys < <(jq -r 'keys[]' <<< "${hotfixes}")
mapfile -t scripts < <(jq -r '.[] | .script' <<< "${hotfixes}")
mapfile -t descriptions < <(jq -r '.[] | .description' <<< "${hotfixes}")
mapfile -t published_dates < <(jq -r '.[] | .published' <<< "${hotfixes}")

declare -A data
for i in "${!keys[@]}"; do
    data["${keys[i]}_script"]="${scripts[i]}"
    data["${keys[i]}_description"]="${descriptions[i]}"
    data["${keys[i]}_published"]="${published_dates[i]}"
done

fancy_message info "Fetched hotfixes list from ${BPurple}${login}${NC}:"
for i in "${keys[@]}"; do
  fancy_message sub "${BOLD}${i}${NC} (${data[${i}_published]}) - ${data[${i}_description]}"
done

mkdir -p "${FIXDIR}"
cd "${FIXDIR}"
for i in "${keys[@]}"; do
  srcdir="${FIXDIR}/${i}-${data[${i}_published]}"
  mkdir -p "${srcdir}"
  cd "${srcdir}"

  curl -fsSL "${BASEURL}/${data[${i}_script]}" -o "${FIXDIR}/${data[${i}_script]##*/}" || { fancy_message error "failed to fetch script for ${BBlue}${i}${NC}"; exit 1; }
  ask "(${BPurple}${i}${NC}) Do you want to view/edit the hotfix?" N
  if ((answer == 1)); then
    (
      if [[ -n $EDITOR ]]; then
          $EDITOR "${FIXDIR}/${data[${i}_script]##*/}"
      elif [[ -n $VISUAL ]]; then
          $VISUAL "${FIXDIR}/${data[${i}_script]##*/}"
      elif command -v sensible-editor > /dev/null; then
        sensible-editor "${FIXDIR}/${data[${i}_script]##*/}"
      elif command -v editor > /dev/null; then
        editor "${FIXDIR}/${data[${i}_script]##*/}"
      elif command -v nano > /dev/null; then
          nano "${FIXDIR}/${data[${i}_script]##*/}"
      elif command -v vim > /dev/null; then
          vim "${FIXDIR}/${data[${i}_script]##*/}"
      elif command -v vi > /dev/null; then
          vi "${FIXDIR}/${data[${i}_script]##*/}"
      else
          fancy_message error "No editors found, please set the EDITOR or VISUAL environment variable."
      fi
    )
  fi
  source "${FIXDIR}/${data[${i}_script]##*/}"
  hotfix

  cd "${FIXDIR}"
  unset -f hotfix 2> /dev/null
  rm -rf "${srcdir}"
done

fancy_message info "Cleaning up"
cleanup
